#!/usr/bin/env python
import json
import os
import socket
import logging
import argparse


"""
Ensure this file has permissions 0o550 (only user, only read-execute) and group "hawamgmt".
"""


logging.basicConfig()
LOGGER = logging.getLogger("virtualpad-admin")
START_USER = os.getenv('FOR_USER') or os.getenv('USER')
ADMIN_SOCKET = f"/run/Hawa/admin.sock"


def _send_command(command):
    client = None
    try:
        client = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        client.connect(ADMIN_SOCKET)
        client.send(f"{json.dumps(command)}\n".encode("utf-8"))
        client.settimeout(3)
        received = client.recv(1024)
        if len(received) == 0:
            return
        decoded = received.decode("utf-8").strip()
        print(decoded or '{"type": "response", "code": "unknown"}')
    finally:
        try:
            client.close()
        except:
            pass


def main():
    parser = argparse.ArgumentParser(description="VirtualPad sample admin tool")
    subparsers = parser.add_subparsers(dest="command")

    # Server commands
    server_parser = subparsers.add_parser("server", help="Server-related commands")
    server_subparsers = server_parser.add_subparsers(dest="server_command")

    server_subparsers.add_parser("start", help="Start the server")
    server_subparsers.add_parser("stop", help="Stop the server")
    server_subparsers.add_parser("check", help="Check the server status")

    # Pad commands
    pad_parser = subparsers.add_parser("pad", help="Gamepad-related commands")
    pad_subparsers = pad_parser.add_subparsers(dest="pad_command")

    clear_parser = pad_subparsers.add_parser("clear", help="Clear a specific gamepad")
    clear_parser.add_argument("number", type=int, choices=range(8), help="Gamepad number (0-7)")
    pad_subparsers.add_parser("clear-all", help="Clear all gamepads")
    pad_subparsers.add_parser("status", help="Get gamepad status")
    reset_passwords = pad_subparsers.add_parser("reset-passwords", help="Resets passwords for all or given pads")
    reset_passwords.add_argument("indices", nargs='*', type=int, choices=range(8), help="Gamepad number (0-7)")

    args = parser.parse_args()

    command = args.command
    if command == "server":
        subcommand = args.server_command
        if subcommand == "start":
            _send_command({"command": "server:start"})
        elif subcommand == "stop":
            _send_command({"command": "server:stop"})
        elif subcommand == "check":
            _send_command({"command": "server:is-running"})
        else:
            LOGGER.error("Invalid server sub-command. Use arguments: `server -h` to get proper help")
    elif command == "pad":
        subcommand = args.pad_command
        if subcommand == "clear":
            _send_command({"command": "pad:clear", "index": args.number})
        elif subcommand == "clear-all":
            _send_command({"command": "pad:clear-all"})
        elif subcommand == "status":
            _send_command({"command": "pad:status"})
        elif subcommand == "reset-passwords":
            _send_command({"command": "pad:reset-passwords", "indices": args.indices})
        else:
            LOGGER.error("Invalid pad sub-command. Use arguments: `pad -h` to get proper help")
    else:
        LOGGER.error("Invalid command. Use arguments: `-h`, `server -h`, and `pad -h` to get proper help")


if __name__ == "__main__":
    main()
